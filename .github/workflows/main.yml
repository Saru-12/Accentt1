name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/**'
      - 'frontend/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: employee-frontend
  TERRAFORM_VERSION: 1.5.5

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      # Initialize Terraform
      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      # Terraform Plan
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan -var="image_url=${{ secrets.ECR_URL }}"

      # Terraform Apply
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -input=false -parallelism=20 -var="image_url=${{ secrets.ECR_URL }}"

  docker:
    runs-on: ubuntu-latest
    needs: terraform  # Ensure terraform steps run first

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ hashFiles('frontend/Dockerfile', 'frontend/package*.json') }}
          restore-keys: |
            docker-

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      # Build and Push Docker Image to ECR
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Force ECS deployment (if applicable)
      - name: Force ECS Deployment
        run: |
          aws ecs update-service \
            --cluster employee-cluster \
            --service employee-frontend-service \
            --force-new-deployment \
            --output text

      # Wait for deployment to stabilize
      - name: Wait for ECS deployment to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster employee-cluster \
            --services employee-frontend-service
