name: Frontend Deploy and Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'terraform/**'
      - '.github/workflows/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: employee-frontend
  ECS_CLUSTER: employee-cluster
  ECS_SERVICE: employee-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    # Validate Terraform files first
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Terraform Init
      id: init
      run: |
        cd terraform
        terraform init -input=false
    
    - name: Terraform Validate
      id: validate
      run: |
        cd terraform
        terraform validate
    
    - name: Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan -no-color -input=false
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -input=false
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Set ECR Registry
      run: echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    # Build and push with proper tagging
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
    
    # Added error handling and verification
    - name: Force ECS Deployment
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment
    
    - name: Verify Deployment
      run: |
        # Wait for service to be stable
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
        
        # Get task status
        TASK_ARN=$(aws ecs list-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service-name ${{ env.ECS_SERVICE }} \
          --query 'taskArns[0]' \
          --output text)
        
        # Check if task is running
        aws ecs describe-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --tasks $TASK_ARN \
          --query 'tasks[0].lastStatus' \
          --output text | grep -q "RUNNING"
